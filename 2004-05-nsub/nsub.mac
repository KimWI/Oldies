; -----------------------------------------------------------------------        
;
;    loader pra sg1000
;    Copyright (C) 2004 by Ricardo Bittencourt
;
;    Project started at 15/5/2004. Last modification was on 15/5/2004.
;    Contact the author through the addresses: 
;        
;        ricardo@700km.com.br
;        http://www.700km.com.br/mundobizarro
;
; -----------------------------------------------------------------------        
;
; Credits:
;
;       Programming
;               Ricardo Bittencourt (main programmer)
;
;       No penguins were harmed during the making of this program.
;
; -----------------------------------------------------------------------        

	ASEG
	ORG     0100h

; -----------------------------------------------------------------------

START:
        JP      LOADER

GAME_DATA:
        INCLUDE NSUB.INC

LOADER:
        DI
        LD      HL,GAME_DATA
        LD      DE,0
        LD      BC,32768
        LDIR
        JP      0

; -----------------------------------------------------------------------

GET_DC:
;	  0xDC / 0xC0 : Joypad Port 1 (read-only)
;                  bit 0 : Joypad 1 Up
;                  bit 1 : Joypad 1 Down
;                  bit 2 : Joypad 1 Left
;                  bit 3 : Joypad 1 Right
;                  bit 4 : Joypad 1 Button 1
;                  bit 5 : Joypad 1 Button 2
;                  bit 6 : Joypad 2 Up
;                  bit 7 : Joypad 2 Down
;                Low logic port. 0 = pressed, 1 = released

	
	PUSH	BC
	PUSH	HL
	; keyboard player 1
	IN	A,(0AAh)
	AND	0F0h
	OR	8
	OUT	(0AAh),A
	IN	A,(0A9h)
	LD	HL,KEYCONVERT
	LD	B,0
	LD	C,A
	ADD	HL,BC
	LD	B,(HL)
	IN	A,(0AAh)
	AND	0F0h
	OR	6
	OUT	(0AAh),A
	IN	A,(0A9h)
	ADD	A,1
	SBC	A,A
	OR	11011111b
	AND	B
	LD	B,A
	; joystick player 1
	LD	A,15
	OUT	(0A0h),A
	IN 	A,(0A2h)
	AND	10111111b
	OUT	(0A1h),A
	LD	A,14
	OUT	(0A0h),A
	IN	A,(0A2h)
	OR	0E0h
	AND	B
	POP	HL
	POP	BC
	RET


; -----------------------------------------------------------------------

INIT_SOUND:
	PUSH	BC
	PUSH	DE
	LD	A,7
	OUT	(0A0h),A
	IN	A,(0A2h)
	AND	11011100b
	OR	00011100b
	OUT	(0A1h),A
	LD	BC,03A1h
	LD	E,0
	LD	A,8
INIT_SOUND_LOOP:	
	OUT	(0A0h),A
	OUT	(C),E
	INC	A
	DJNZ	INIT_SOUND_LOOP
	
	POP	DE
	POP	BC
	RET
	
; -----------------------------------------------------------------------

FILLER:	DS 04200h-FILLER
        
; -----------------------------------------------------------------------

J4200: 	JP 	GET_DC
J4203:	JP	PUT_7F
J4206:	JP	INIT_SOUND
J4209:	JP	OPENING_SCREEN
J420C:	JP	RESTORE_SCREEN

; -----------------------------------------------------------------------

PUT_7F:
	PUSH	HL
	PUSH	BC
	
	OR	A
	JP	P,SOUND_DATA
	
	LD	(LATCH),A
	BIT	4,A
	JR	NZ,VOLUME
	
	; select low bits of frequency for tone channels
	LD	B,A
	RLCA
	RLCA
	RLCA
	RLCA
	AND	6
	PUSH	AF
	CALL	LOAD_FREQ_TABLE
	LD	A,(HL)
	AND	0F0h
	LD	C,A
	LD	A,B
	AND	0Fh
	OR	C
	LD	(HL),A
	POP	AF
	
FREQ_DATA:	
	CP	6
	JP	Z,FREQ_NOISE
	CP	4
	JR	Z,FREQ_JOINT
	OUT	(0A0h),A
	PUSH	AF
	CALL	LOAD_FREQ_TABLE
	LD	A,(HL)
	OUT	(0A1h),A
	INC	HL
	POP	AF
	INC	A
	OUT	(0A0h),A
	LD	A,(HL)
	OUT	(0A1h),A
	
	JP	SOUND_EXIT
	
	; select volume for tone channels
VOLUME:
	LD	B,A
VOLUME_DATA:	
	RLCA
	RLCA
	RLCA
	AND	3
	LD	C,A
	ADD	A,LOW(VOL0)
	LD	L,A
	LD	A,HIGH(VOL0)
	ADC	A,0
	LD	H,A
	LD	A,B
	AND	0Fh
	XOR	0Fh
	LD	(HL),A
	
	LD	A,C
	CP	3
	JR	Z,VOLUME_NOISE
	CP	2
	JR	Z,SOUND_EXIT ; tone 2 not used
	ADD	A,8
	OUT	(0A0h),A
	LD	A,(HL)
	OUT	(0A1h),A
	JR	SOUND_EXIT

FREQ_JOINT:
	PUSH	AF
	CALL	LOAD_FREQ_TABLE
	LD	A,6
	OUT	(0A0h),A
	INC	HL
	LD	A,(HL)
	AND	0Fh
	JR	NZ,SOUND_SATURATE
	DEC	HL
	LD	A,(HL)
	AND	11100000b
	JR	NZ,SOUND_SATURATE
	LD	A,(HL)
	OUT	(0A1h),A
	POP	AF
	JR	SOUND_EXIT
	
SOUND_SATURATE:
	LD	A,0FFh
	OUT	(0A1h),A
	POP	AF
	JR	SOUND_EXIT	
	
SOUND_DATA:
	LD	HL,LATCH
	BIT	4,(HL)
	JR	Z,HIGH_FREQ
	
	LD	B,A
	LD	A,(LATCH)
	JR	VOLUME_DATA

	; select high bits of frequency for tone channels
HIGH_FREQ:
	LD	B,A
	LD	A,(HL)
	RLCA
	RLCA
	RLCA
	RLCA
	AND	6
	PUSH	AF	
	CALL	LOAD_FREQ_TABLE
	LD	A,B
	RLCA
	RLCA
	RLCA
	RLCA
	LD	B,A
	AND	0F0h
	LD	C,A	
	LD	A,(HL)
	AND	0Fh
	OR	C
	LD	(HL),A
	INC	HL
	LD	A,B
	AND	3
	LD	C,A
	LD	A,(HL)
	AND	11111100b
	OR	C
	LD	(HL),A
	POP	AF
	JP	FREQ_DATA

VOLUME_NOISE:	
	LD	A,10
	OUT	(0A0h),A
	LD	A,(HL)
	OUT	(0A1h),A
	JR	SOUND_EXIT

FREQ_NOISE:
	; not implemented yet
	; not used in girl's garden

SOUND_EXIT:
	POP	BC
	POP	HL	
	RET

; -----------------------------------------------------------------------

LOAD_FREQ_TABLE:
	ADD	A,LOW(FREQ0)
	LD	L,A
	LD	A,HIGH(FREQ0)
	ADC	A,0
	LD	H,A
	RET
	
; -----------------------------------------------------------------------

OPENING_SCREEN:
	
	DI

	LD	A,0A2h
	OUT	(099h),A
	LD	A,081h
	OUT	(099h),A

	LD	A,0fh
	OUT	(099h),A
	LD	A,087h
	OUT	(099h),A

	XOR	A
	OUT	(099h),A
	LD	BC,4000h
	OUT	(099h),A
	LD	HL,ENDOFCODE
BACKUP_VRAM:	
	IN	A,(098h)
	LD	(HL),A
	INC	HL
	DEC	BC
	LD	A,B
	OR	C
	JR	NZ,BACKUP_VRAM


	XOR	A
	OUT	(099h),A
	LD	A,040h
	OUT	(099h),A
	
	LD	HL,OPENING_SCR + 128
	LD	BC,1800h
OPENING_PATT:	
	LD	A,(HL)
	OUT	(098h),A
	INC	HL
	DEC	BC
	LD	A,B
	OR	C
	JR	NZ,OPENING_PATT
	
	XOR	A
	OUT	(099h),A
	LD	A,040h+20h
	OUT	(099h),A
	
	LD	HL,OPENING_SCR + 128 + 1800h
	LD	BC,1800h
OPENING_COLOR:	
	LD	A,(HL)
	OUT	(098h),A
	INC	HL
	DEC	BC
	LD	A,B
	OR	C
	JR	NZ,OPENING_COLOR

	XOR	A
	OUT	(099h),A
	LD	A,040h+18h
	OUT	(099h),A

	LD	HL,SPRITE_PATT
	LD	BC,32
OPENING_SPR:	
	LD	A,(HL)
	OUT	(098h),A
	INC	HL
	DEC	BC
	LD	A,B
	OR	C
	JR	NZ,OPENING_SPR

	XOR	A
	OUT	(099h),A
	LD	A,040h+38h
	OUT	(099h),A
	
	LD	H,0
	LD	BC,768
OPENING_NAME:	
	LD	A,H
	OUT	(098h),A
	INC	H
	DEC	BC
	LD	A,B
	OR	C
	JR	NZ,OPENING_NAME

	XOR	A
	OUT	(099h),A
	LD	A,040h+3Bh
	OUT	(099h),A
	
	IRP	I,<83,140,0,1,87,143,0,1,0D0h>
	LD	A,I
	OUT	(098h),A
	EX 	(SP),HL
	EX 	(SP),HL
	ENDM


	LD	A,0E2h
	OUT	(099h),A
	LD	A,081h
	OUT	(099h),A

	
	EI
	RET
	
	
; -----------------------------------------------------------------------

RESTORE_SCREEN:
	
	DI

	LD	A,0A2h
	OUT	(099h),A
	LD	A,081h
	OUT	(099h),A

	XOR	A
	OUT	(099h),A
	LD	A,040h
	LD	BC,4000h
	OUT	(099h),A
	LD	HL,ENDOFCODE
UNBACKUP_VRAM:	
	LD	A,(HL)
	OUT	(098h),A
	INC	HL
	DEC	BC
	LD	A,B
	OR	C
	JR	NZ,UNBACKUP_VRAM

	LD	A,0E2h
	OUT	(099h),A
	LD	A,081h
	OUT	(099h),A

	LD	A,087h
	OUT	(099h),A
	LD	A,087h
	OUT	(099h),A
	
	RET

; -----------------------------------------------------------------------

SPRITE_PATT:
	DB	1,1,1,1,1,1,1,1
	DB	1,1,1,1,1,1,1,1
	DB	0,0,0,0,0,0,0,0
	DB	0,0,0,0,0,0,0,0

; -----------------------------------------------------------------------

FREQ0:	DW	0
FREQ1:	DW	0
FREQ2:	DW	0
FREQN:	DW	0

VOL0:	DB	0
VOL1:	DB	0
VOL2:	DB	0
VOLN:	DB	0

LATCH:	DB	0

; -----------------------------------------------------------------------

KEYCONVERT:
	I DEFL 0
	REPT 256
	DB ((I AND 128) SHR 4) OR ((I AND 96) SHR 5) OR ((I AND 16) SHR 2) OR ((I AND 1) SHL 4) OR 0E0h
	I DEFL I+1
	ENDM

OPENING_SCR:
	INCLUDE NSUBOP.INC

ENDOFCODE:

	END     START



